package telegram

import (
	"context"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"googlemaps.github.io/maps"
	"reminder_bot/internal/models"
	"time"
)

const (
	errorText = "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n /start"
	helloText = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç Reminder!\n–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Minsk\n\n–û —á–µ–º –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?"

	commandStart     = "start"
	commandStartText = "–û —á–µ–º –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?"

	addText      = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤—Ä–µ–º—è. ‚òùÔ∏è–¢–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–∂–∏–º–∞—è –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫–æ–º–∞–Ω–¥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≤—Ä–µ–º—è."
	settingsText = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n - —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: %s"

	timezoneText    = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. \n–ù–∞–ø—Ä–∏–º–µ—Ä: Minsk"
	errTimezoneText = "üòê–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å"
	AddTimezoneText = "–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω\n–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n - —è–∑—ã–∫: –†—É—Å—Å–∫–∏–π\n - —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: %s"

	webText  = "–°–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
	listText = "–ü—É—Å—Ç–æ"

	errHandleMessageText = "–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç"

	errAddReminderText = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n%s"
	addReminderText    = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n\n–¢–µ–∫—Å—Ç: %s"

	unknownCommandText = "—è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É"
)

//commands
func (b *Bot) handleCommand(message *tgbotapi.Message) error {
	switch message.Command() {
	case commandStart:
		return b.handleStartCommand(message)
	default:
		return b.handleUnknownCommand(message)
	}
}

func (b *Bot) handleStartCommand(message *tgbotapi.Message) error {

	_ = b.cache.SetNavigation(message.From.ID, "start")

	return b.send(commandStartText, &mainMenu, message)
}

func (b *Bot) handleUnknownCommand(message *tgbotapi.Message) error {
	return b.send(unknownCommandText, &mainMenu, message)
}

//handle messages
func (b *Bot) handleMessage(message *tgbotapi.Message) error {
	switch message.Text {
	case "‚ûï–î–æ–±–∞–≤–∏—Ç—å":
		return b.handleAddMessage(message)
	case "‚ö†–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		return b.handleSettingsMessage(message)
	case "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
		return b.handleTimezoneMessage(message)
	case "üåèWeb":
		return b.handleWebMessage(message)
	case "üìù–°–ø–∏—Å–æ–∫":
		return b.handleListMessage(message)
	case "–û—Ç–º–µ–Ω–∞":
		return b.handleExitMessage(message)
	default:
		return b.handleUnknownMessage(message)
	}
}

//add message
func (b *Bot) handleAddMessage(message *tgbotapi.Message) error {
	_ = b.cache.SetNavigation(message.From.ID, "add")
	return b.send(addText, &exitMenu, message)
}

//settings message
func (b *Bot) handleSettingsMessage(message *tgbotapi.Message) error {
	user, _ := b.cache.GetUserInfo(message.From.ID)
	_ = b.cache.SetNavigation(message.From.ID, "settings")
	text := fmt.Sprintf(settingsText, user.Timezone)
	return b.send(text, &settingMenu, message)
}

//timezone message
func (b *Bot) handleTimezoneMessage(message *tgbotapi.Message) error {
	_ = b.cache.SetNavigation(message.From.ID, "timezone")
	return b.send(timezoneText, &exitMenu, message)
}

//web message
func (b *Bot) handleWebMessage(message *tgbotapi.Message) error {
	_ = b.cache.SetNavigation(message.From.ID, "web")
	return b.send(webText, &mainMenu, message)
}

//list
func (b *Bot) handleListMessage(message *tgbotapi.Message) error {

	list, err := b.useCase.GetRemindersByUserId(models.GetRemindersRequest{UserId: message.From.ID})
	if err != nil {
		fmt.Println(err)
		_ = b.cache.SetNavigation(message.From.ID, "start")
		return b.send(errorText, &mainMenu, message)
	}

	if len(list) == 0 {
		_ = b.cache.SetNavigation(message.From.ID, "start")
		return b.send(listText, &mainMenu, message)
	}

	text := "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
	for i, r := range list {
		text += fmt.Sprintf("%d) %s\n", i+1, r.Text)
	}

	_ = b.cache.SetNavigation(message.From.ID, "start")
	return b.send(text, &mainMenu, message)
}

//exit message
func (b *Bot) handleExitMessage(message *tgbotapi.Message) error {
	navigation, _ := b.cache.GetNavigation(message.From.ID)
	switch navigation {
	case "add":
		return b.handleStartCommand(message)
	case "settings":
		return b.handleStartCommand(message)
	case "timezone":
		return b.handleSettingsMessage(message)
	default:
		return b.handleStartCommand(message)
	}
}

//unknown message
func (b *Bot) handleUnknownMessage(message *tgbotapi.Message) error {
	navigation, _ := b.cache.GetNavigation(message.From.ID)
	switch navigation {
	case "start":
		return b.addReminders(message)
	case "add":
		return b.addReminders(message)
	case "timezone":
		{
			city := message.Text

			gcReq := &maps.GeocodingRequest{
				Address: city,
			}
			gcRes, err := b.gmClient.Geocode(context.Background(), gcReq)
			if err != nil {
				_ = b.cache.SetNavigation(message.From.ID, "timezone")
				return b.send(errTimezoneText, &exitMenu, message)
			}
			tzReq := &maps.TimezoneRequest{
				Location: &maps.LatLng{
					Lat: gcRes[0].Geometry.Location.Lat,
					Lng: gcRes[0].Geometry.Location.Lng,
				},
				Timestamp: time.Now(),
				Language:  "en",
			}
			tzRes, err := b.gmClient.Timezone(context.Background(), tzReq)
			if err != nil {
				_ = b.cache.SetNavigation(message.From.ID, "timezone")
				return b.send(errorText, &exitMenu, message)
			}
			err = b.useCase.UpdateTimezone(message.From.ID, tzRes.TimeZoneID)
			if err != nil {
				_ = b.cache.SetNavigation(message.From.ID, "timezone")
				return b.send(errTimezoneText, &exitMenu, message)
			}
			_ = b.cache.SetNavigation(message.From.ID, "settings")
			text := fmt.Sprintf(AddTimezoneText, tzRes.TimeZoneID)
			return b.send(text, &settingMenu, message)
		}
	default:
		_ = b.cache.SetNavigation(message.From.ID, "start")
		return b.send(errHandleMessageText, &mainMenu, message)
	}
}

func (b *Bot) addReminders(message *tgbotapi.Message) error {
	res, err := b.useCase.Parse(models.ParseRequest{Text: message.Text})
	if err != nil {
		_ = b.cache.SetNavigation(message.From.ID, "start")
		text := fmt.Sprintf(errAddReminderText, err.Error())
		return b.send(text, &mainMenu, message)
	}

	err = b.useCase.AddReminder(models.AddReminderRequest{
		UserId: message.From.ID,
		Text:   res.Text,
		Date:   res.Time,
	})

	if err != nil {
		_ = b.cache.SetNavigation(message.From.ID, "start")
		text := fmt.Sprintf(errAddReminderText, err.Error())
		return b.send(text, &mainMenu, message)
	}

	_ = b.cache.SetNavigation(message.From.ID, "start")
	text := fmt.Sprintf(addReminderText, res.Text)
	return b.send(text, &mainMenu, message)
}

func (b *Bot) send(text string, menu *tgbotapi.ReplyKeyboardMarkup, message *tgbotapi.Message) error {
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	msg.ReplyMarkup = menu
	_, err := b.bot.Send(msg)
	return err
}
